name: 'CI: Integrate Preview to Prod'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

permissions:
  contents: write

on:
  workflow_run:
    workflows:
      - 'CD: Deploy to Preview Domain'
    types:
      - completed
  workflow_dispatch:

jobs:
  test:
    name: Run CI tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: preview

      # `pnpm` needs to be installed before we setup Node and use it as a cache
      # with `pnpm`
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm i --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      # Build for `prod` since that is what we are interested integrating into
      #
      # Running `vercel build` will result in `next build` being ran.
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Docker images
        run: docker compose pull

      - name: Run Redis test DB
        run: docker compose up -d

      # Export NEXTAUTH_URL as localhost when running in GitHub Actions to
      # avoid UntrustedHost error: https://authjs.dev/reference/core/errors/#untrustedhost
      # Note that this isn't a pattern to follow for any Vercel deployments
      #
      # We use a randomly generated `AUTH_SECRET` as well to ensure we can run
      # locally
      - name: Run CI tests
        run: |
          export NEXTAUTH_URL="http://localhost:3000"
          export AUTH_SECRET="8604b92966b197c12aab26f66aa8596a"
          pnpm run start &
          # You shouldn't need to sleep here to let the NextJS server come up as
          # we need to compile our tests with `tsc` before running them which
          # will consume some time
          pnpm run test

      - name: Stop Redis test DB
        if: always()
        run: docker compose down

  integrate:
    name: Integrate to Prod branch
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge preview into prod as fast-forward
        run: |
          git fetch origin
          git checkout -b prod --track origin/prod
          git merge --ff-only origin/preview
          git push origin prod
