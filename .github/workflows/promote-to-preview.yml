name: Promote to Preview

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run CI tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # `pnpm` needs to be installed before we setup Node and use it as a cache
      # with `pnpm`
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Note that while our Lambda backend uses Node 20 and Vercel also has
      # support for it it is currently in beta - thus use 18 for now
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm i --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      # Note that running `vercel build` will result in `next build` being ran
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      # Export NEXTAUTH_URL as localhost when running in GitHub Actions to
      # avoid UntrustedHost error: https://authjs.dev/reference/core/errors/#untrustedhost
      # Note that this isn't a pattern to follow for any Vercel deployments
      #
      # We use a randomly generated `AUTH_SECRET` as well to ensure we can run
      # locally
      - name: Run CI tests
        run: |
          export NEXTAUTH_URL="http://localhost:3000"
          export AUTH_SECRET="8604b92966b197c12aab26f66aa8596a"
          pnpm run start &
          echo "Sleeping for 5 seconds to let server start"
          sleep 5s
          pnpm run test

  deploy:
    name: Deploy to Preview branch
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # This works to create preview
      # - name: Rebase preview off of main
      #   run: |
      #     git fetch origin
      #     git checkout main
      #     git rebase origin/main
      #     git checkout -b preview
      #     git push origin preview

      - name: Rebase preview off of main
        run: |
          git fetch --all --prune origin main
          git checkout preview
          git checkout origin/preview
          git merge --ff-only origin/main




      # - name: Rebase preview off of main
      #   run: |
      #     git fetch --all --prune
      #     git checkout preview
      #     git merge --ff-only main

      # - name: Merge main innto preview
      #   uses: devmasx/merge-branch@master
      #   with:
      #     type: now
      #     from_branch: main
      #     target_branch: preview
      #     github_token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Merge into preview
      #   run: |
      #     git fetch --all --prune
      #     git checkout preview
      #     git merge origin/main