name: 'CI: Increment Package Version On Main'

on:
  workflow_run:
    workflows:
      - 'CI: Integrate Main to Preview'
    types:
      - completed
  workflow_dispatch:
    inputs:
      incrementType:
        description: 'Type of version increment (patch, minor, major)'
        required: true
        default: 'patch'

jobs:
  increment-version:
    name: Increment Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Increment version
        run: |
          OLD_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=$(npm version ${{ github.event.inputs.incrementType }} --no-git-tag-version)
          echo "Old version: $OLD_VERSION"
          echo "New version: $NEW_VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git status
          git commit -m "chore(release): increment ${{ github.event.inputs.incrementType }} version from $OLD_VERSION to $NEW_VERSION" || echo "No changes to commit"
          git push

      - name: Setup CHANGELOG for new version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          CURRENT_DATE=$(date "+%B %dth, %Y")
          VERSION_ENTRY="## Version $NEW_VERSION"
          
          if grep -q "$VERSION_ENTRY" CHANGELOG.md; then
            echo "CHANGELOG.md already ready for version $NEW_VERSION"
          else
            echo "Updating CHANGELOG.md for version $NEW_VERSION"

            # Preparing the new CHANGELOG entry.
            # Remove the header from the NEW_ENTRY variable since it's already at the top of the CHANGELOG.md
            NEW_ENTRY="$VERSION_ENTRY: $CURRENT_DATE\n\n### New Features\n\n- N/A\n\n### Enhancements\n\n- N/A\n\n### Bug Fixes\n\n- N/A\n\n"

            # Inserting the new entry at the beginning of the file right after the header.
            # Using sed to inject the new entry after the Release Notes header.
            sed -i "1,/^\# Release Notes$/!b; /^\# Release Notes$/{n; a $NEW_ENTRY" -e '}' CHANGELOG.md

            # Commit the new change
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG.md for version $NEW_VERSION"
            git push
          fi
  